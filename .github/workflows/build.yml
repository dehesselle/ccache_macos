# SPDX-FileCopyrightText: 2021 Ren√© de Hesselle <dehesselle@web.de>
# SPDX-License-Identifier: MIT

name: build
on: push
env:
  CCACHE_VERSION: 4.4
  BUILD_DIR: ${{ github.workspace }}/build
  INSTALL_DIR: ${{ github.workspace }}/install
jobs:

################################################################################

  build:
    runs-on: macos-10.15
    steps:

    #------------------------------------------------------------------- prepare

    # GitHub does not provide old SDKs on their runners. There is no official
    # public download available from Apple and I don't trust 3rd party sources
    # (e.g. "phracker"), so I'm enabling this job to download a compressed
    # tarball that contains the SDK from a non-public source.
    # In order to use this, you need to setup a repository secret named
    # SDK_DOWNLOAD_URL and give a link to a .tar.xz file.
    # At the moment, only 10.11.4 SDK is supported (hardcoded below).
    - name: install macOS SDK
      if: env.SDK_DOWNLOAD_URL != null
      env:
        SDK_DOWNLOAD_URL: ${{ secrets.SDK_DOWNLOAD_URL }}
      run: |
        curl -L ${{ secrets.SDK_DOWNLOAD_URL }} | tar -xJp
        echo "SDKROOT=$GITHUB_WORKSPACE/$(basename ${SDK_DOWNLOAD_URL%%.tar.xz*})" >> $GITHUB_ENV

    # Checkout repository to verify SDK...
    - name: checkout sdkchecksum repository
      if: env.SDK_DOWNLOAD_URL != null
      env:
        SDK_DOWNLOAD_URL: ${{ secrets.SDK_DOWNLOAD_URL }}
      uses: actions/checkout@v2
      with:
        repository: dehesselle/sdkchecksum
        path: sdkchecksum
        clean: false

    # ...and use it to verify
    - name: verify SDK
      if: env.SDK_DOWNLOAD_URL != null
      env:
        SDK_DOWNLOAD_URL: ${{ secrets.SDK_DOWNLOAD_URL }}
      run: |
        shasum -a 256 sdkchecksum/MacOSX10.11.4.sdk.sha256
        if shasum -s -c $GITHUB_WORKSPACE/sdkchecksum/MacOSX10.11.4.sdk.sha256; then
          echo "ok - SDK verified"
          exit 0
        else
          echo "error - SDK verification failed"
          exit 1
        fi

    - name: install Ninja
      env:
        HOMEBREW_NO_AUTO_UPDATE: 1
        HOMEBREW_NO_INSTALL_CLEANUP: 1
      run: brew install ninja

    #--------------------------------------------------------------------- build

    - name: download source
      run: curl -L https://github.com/ccache/ccache/releases/download/v$CCACHE_VERSION/ccache-$CCACHE_VERSION.tar.xz | tar -xJp

    - name: build ccache
      env:
        CMAKE_GENERATOR: Ninja
      run: |
        mkdir $BUILD_DIR
        cd $BUILD_DIR
        cmake \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=$INSTALL_DIR \
          -DZSTD_FROM_INTERNET=ON \
          -DHIREDIS_FROM_INTERNET=ON \
          ../ccache-$CCACHE_VERSION
        ninja
        ninja install

    #------------------------------------------------------------------ artifact

    - name: generate checksum
      run: |
        cd $INSTALL_DIR/bin
        shasum -a 256 ccache > ccache.sha256

    - name: upload workflow artifact
      uses: actions/upload-artifact@v2
      with:
        name: ccache
        path: ${{ env.INSTALL_DIR }}/bin/*

################################################################################

  release:
    runs-on: macos-10.15
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    steps:

    - name: download build artifact
      uses: actions/download-artifact@v2
      with:
        name: ccache

    - name: create release archive
      run: |
        chmod 755 ccache
        tar cpJf ccache.tar.xz ccache ccache.sha256

    - name: create release
      id: release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ github.ref }}
        draft: true
        prerelease: false

    - name: get tag
      id: get_tag
      run: echo ::set-output name=value::${GITHUB_REF/refs\/tags\//}

    - name: upload ccache archive to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.release.outputs.upload_url }}
        asset_path: ccache.tar.xz
        asset_name: ccache_${{ steps.get_tag.outputs.value }}.tar.xz
        asset_content_type: application/octet-stream
